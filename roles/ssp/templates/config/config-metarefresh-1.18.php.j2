<?php

/*
 * Configuration for metarefresh module.
 * {{ ansible_managed }}
 */

$config = [
{% if ssp_mod_metarefresh_blacklist is defined %}
    /*
     * Global blacklist: entityIDs that should be excluded from ALL sets.
     */
    'blacklist' => [
{% for entity_id in ssp_mod_metarefresh_blacklist %}
        '{{ entity_id }}',
{% endfor %}
    ],
{% endif %}
    /*
     * Conditional GET requests
     * Efficient downloading so polling can be done more frequently.
     * Works for sources that send 'Last-Modified' or 'Etag' headers.
     * Note that the 'data' directory needs to be writable for this to work.
     */
    //'conditionalGET'	=> TRUE,

    'sets' => [
{% for set in ssp_mod_metarefresh_sets %}
        '{{ set.name }}' => [
            'cron' => ['{{ set.cron }}'],
{% if set.sources is defined %}
            'sources'=> [
{% for src in set.sources %}
                [
{% if src.blacklist is defined %}
                    /*
                     * entityIDs that should be excluded from this src.
                     */
                    'blacklist' => [
{% for entity_id in src.blacklist %}
                        '{{ entity_id }}',
{% endfor %}
                    ],
{% endif %}
{% if src.whitelist is defined %}
                    /*
                     * Whitelist: only keep these EntityIDs.
                     */
                    'whitelist' => [
{% for entity_id in src.whitelist %}
                        '{{ entity_id }}',
{% endfor %}
                    ],
{% endif %}
                    //'conditionalGET' => TRUE,
                    'src' => '{{ src.url }}',
{% if src.validate_fingerprint is defined %}
                    'validateFingerprint' => '{{ src.validate_fingerprint }}',
{% endif %}
                    'template' => [
{% if src.tags is defined %}
                        'tags' => [
{% for tag in src.tags %}
                            '{{ tag }}',
{% endfor %}
                        ],
{% endif %}
{% if src.authproc is defined %}
                        'authproc' => [
{% for entry in src.authproc %}
{% for priority, filter_params in entry.items() %}
                            {{ priority }} => [
{% for key, value in filter_params.items() %}
{% if value == None %}
                                '{{ key }}',
{% elif value is iterable and value is not string %}
                                '{{ key }}' => [
{% for item in value %}
                                    '{{ item }}',
{% endfor %}
                                ],
{% elif value == true or value == false or value is number %}
                                '{{ key }}' => {{ value }},
{% else %}
                                '{{ key }}' => '{{ value }}',
{% endif %}
{% endfor %}
                            ],
{% endfor %}
{% endfor %}
                        ],
{% elif src.authproc_raw is defined %}
                        'authproc' => [
                            {{ src.authproc_raw | indent(width=28, indentfirst=False) }}
                        ],
{% endif %}
{% if src.extra_parameters is defined %}
{{ src.extra_parameters | indent(width=24, indentfirst=True) }}
{% endif %}
                    ],
{% if src.types is defined %}
                    /*
                     * The sets of entities to load, any combination of:
                     *  - 'saml20-idp-remote'
                     *  - 'saml20-sp-remote'
                     *  - 'shib13-idp-remote'
                     *  - 'shib13-sp-remote'
                     *  - 'attributeauthority-remote'
                     *
                     * All of them will be used by default.
                     *
                     * This option takes precedence over the same option per metadata set.
                     */
                    'types' => [
{% for type in src.types %}
                        '{{ type }}',
{% endfor %}
                    ],
{% endif %}
                ],
{% endfor %}
            ],
{% elif set.sources_raw is defined %}
            'sources' => {{ set.sources_raw }},
{% endif %}
            // Maximum cache time in seconds
            'expireAfter' => 60 * 60 * 24 * {{ set.expire_after }},
            'outputDir' => 'metadata/{{ set.output_dir }}/',
            /*
             * Which output format the metadata should be saved as.
             * Can be 'flatfile' or 'serialize'. 'flatfile' is the default.
             */
            'outputFormat' => '{{ set.output_format }}',
{% if set.types is defined %}
            /*
             * The sets of entities to load, any combination of:
             *  - 'saml20-idp-remote'
             *  - 'saml20-sp-remote'
             *  - 'shib13-idp-remote'
             *  - 'shib13-sp-remote'
             *  - 'attributeauthority-remote'
             *
             * All of them will be used by default.
             */
            'types' => [
{% for type in set.types %}
                '{{ type }}',
{% endfor %}
            ],
{% endif %}
        ],
{% endfor %}
    ],
];

