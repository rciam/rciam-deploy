<?php
/**
 * SAML 2.0 IdP configuration for SimpleSAMLphp.
 *
 * See: https://simplesamlphp.org/docs/stable/simplesamlphp-reference-idp-hosted
 *
 * {{ ansible_managed }}
 */

{% for idp in ssp_idp_hosts %}
$metadata['{{ idp.entity_id }}'] = [
    /*
     * The hostname of the server (VHOST) that will use this SAML entity.
     *
     * Can be '__DEFAULT__', to use this entry by default.
     */
    'host' => '{{ idp.host }}',

    // X.509 key and certificate. Relative to the cert directory.
    'privatekey' => 'idp-{{ idp.entity_id }}.key',
    'certificate' => 'idp-{{ idp.entity_id }}.crt',

{% if idp.sign_algorithm is defined %}
    // Algorithm to use when signing any message generated by this IdP.
    'signature.algorithm' => '{{ idp.sign_algorithm }}',
{% endif %}
{% if idp.redirect_sign is defined %}
    // Whether logout requests and logout responses sent from this IdP
    // should be signed.
    'redirect.sign' => {{ idp.redirect_sign }},
{% endif %}
{% if idp.redirect_validate is defined %}
    // Whether authentication requests, logout requests and logout
    // responses received/sent from this IdP should be validated.
    'redirect.validate' => {{ idp.redirect_validate }},
{% endif %}
    // Authentication source to use. Must be one that is configured in
    // 'config/authsources.php'.
    'auth' => '{{ idp.auth }}',
{% if idp.organization_name is defined %}
    // Localised names of the organisation responsible for this IdP.
    'OrganizationName' => [
{% for key, value in idp.organization_name.items() %}
        '{{ key }}' => '{{ value }}',
{% endfor %}
    ],
{% endif %}
{% if idp.organization_display_name is defined %}
    // Localised user-friendly names of the organisation responsible for
    // this IdP.
    'OrganizationDisplayName' => [
{% for key, value in idp.organization_display_name.items() %}
        '{{ key }}' => '{{ value }}',
{% endfor %}
    ],
{% endif %}
{% if idp.organization_url is defined %}
    // Localised URLs of the organisation responsible for this IdP.
    'OrganizationURL' => [
{% for key, value in idp.organization_url.items() %}
        '{{ key }}' => '{{ value }}',
{% endfor %}
    ],
{% endif %}
{% if idp.privacy_statement_url is defined %}
    // Localised URLs to where users can find a privacy policy for this IdP.
    'privacypolicy' => [
{% for key, value in idp.privacy_statement_url.items() %}
        '{{ key }}' => '{{ value }}',
{% endfor %}
    ],
{% endif %}
{% if idp.contacts is defined %}
    // List of contacts in addition to the technical contact configured
    // through config/config.php
    'contacts' => [
{% for contact in idp.contacts %}
        [
            'contactType'       => '{{ contact.contact_type }}',
{% if contact.company is defined %}
            'company'           => '{{ contact.company }}',
{% endif %}
{% if contact.given_name is defined %}
            'givenName'         => '{{ contact.given_name }}',
{% endif %}
{% if contact.sur_name is defined %}
            'surName'           => '{{ contact.sur_name }}',
{% endif %}
{% if contact.email_address is defined %}
            'emailAddress'      => '{{ contact.email_address }}',
{% endif %}
{% if contact.telephone_number is defined %}
            'telephoneNumber'   => '{{ contact.telephone_number }}',
{% endif %}
{% if contact.attributes is defined %}
            'attributes'        => [
{% for key, value in contact.attributes.items() %}
                '{{ key }}' => '{{ value }}',
{% endfor %}
            ],
{% endif %}
        ],
{% endfor %}
    ],
{% endif %}
{% if idp.scopes is defined %}
    /*
     * A list with scopes for this IdP. The scopes will be added to the
     * generated XML metadata. A scope can either be a domain name or a
     * regular expression matching a number of domains.
     */
     'scope' => [
{% for scope in idp.scopes %}
         '{{ scope }}',
{% endfor %}
     ],
{% endif %}

    /*
     * SAML 2.0 options
     */
{% if idp.attributes_name_format is defined %}
    // The NameFormat of attributes.
    'attributes.NameFormat' => '{{ idp.attributes_name_format }}',
{% endif %}
{% if idp.name_id_format is defined %}
    // The format of the NameID supported by this IdP.
    'NameIDFormat' => '{{ idp.name_id_format }}',
{% endif %}
    /*
     * SAML 2.0 Metadata Extensions for Login and Discovery
     */
    'UIInfo' => [
{% if idp.display_name is defined %}
        'DisplayName' => [
{% for key, value in idp.display_name.items() %}
            '{{ key }}' => '{{ value }}',
{% endfor %}
        ],
{% endif %}
{% if idp.description is defined %}
        'Description' => [
{% for key, value in idp.description.items() %}
            '{{ key }}' => '{{ value }}',
{% endfor %}
        ],
{% endif %}
{% if idp.logos is defined %}
        'Logo' => [
{% for logo in idp.logos %}
            [
                'url' => '{{ logo.url }}',
                'width' => {{ logo.width }},
                'height' => {{ logo.height }},
{% if logo.lang is defined %}
                'lang' => '{{ logo.lang }}',
{% endif %}
            ],
{% endfor %}
        ],
{% endif %}
{% if idp.information_url is defined %}
        'InformationURL' => [
{% for key, value in idp.information_url.items() %}
            '{{ key }}' => '{{ value }}',
{% endfor %}
        ],
{% endif %}
{% if idp.privacy_statement_url is defined %}
        'PrivacyStatementURL' => [
{% for key, value in idp.privacy_statement_url.items() %}
            '{{ key }}' => '{{ value }}',
{% endfor %}
        ],
{% endif %}
    ],
    'DiscoHints' => [
{% if idp.ip_hints is defined %}
        'IPHint' => [
{% for ip_hint in idp.ip_hints %}
            '{{ ip_hint }}',
{% endfor %}
        ],
{% endif %}
{% if idp.domain_hints is defined %}
        'DomainHint' => [
{% for domain_hint in idp.domain_hints %}
            '{{ domain_hint }}',
{% endfor %}
        ],
{% endif %}
{% if idp.geolocation_hints is defined %}
        'GeolocationHint' => [
{% for geolocation_hint in idp.geolocation_hints %}
            '{{ geolocation_hint }}',
{% endfor %}
        ],
{% endif %}
    ],
{% if idp.entity_attributes is defined %}
    'EntityAttributes' => [
{% for entity_attribute in idp.entity_attributes %}
        '{{ entity_attribute.attribute_name }}' => [
{% for entity_attribute_value in entity_attribute.attribute_values %}
            '{{ entity_attribute_value }}',
{% endfor %}
        ],
{% endfor %}
    ],
{% endif %}
{% if idp.authproc is defined %}
    'authproc' => [
{% for entry in idp.authproc %}
{% for priority, filter_params in entry.items() %}
        {{ priority }} => [
{% for key, value in filter_params.items() %}
{% if value == None %}
            '{{ key }}',
{% elif value is iterable and value is not string %}
            '{{ key }}' => [
{% for item in value %}
                '{{ item }}',
{% endfor %}
            ],
{% elif value == true or value == false or value is number %}
            '{{ key }}' => {{ value }},
{% else %}
            '{{ key }}' => '{{ value }}',
{% endif %}
{% endfor %}
        ],
{% endfor %}
{% endfor %}
    ],
{% elif idp.authproc_raw is defined %}
    'authproc' => [
        {{ idp.authproc_raw | indent(width=8, first=False) }}
    ],
{% endif %}
{% if idp.extra_parameters is defined %}
{{ idp.extra_parameters | indent(width=4, first=True) }}
{% endif %}

    /*
     * Uncomment the following to specify the registration information in the
     * exported metadata. Refer to:
     * http://docs.oasis-open.org/security/saml/Post2.0/saml-metadata-rpi/v1.0/cs01/saml-metadata-rpi-v1.0-cs01.html
     * for more information.
     */
    /*
    'RegistrationInfo' => [
        'authority' => 'urn:mace:example.org',
        'instant' => '2008-01-17T11:28:03Z',
        'policies' => [
            'en' => 'http://example.org/policy',
            'es' => 'http://example.org/politica',
        ],
    ],
    */
];

{%- endfor %}
